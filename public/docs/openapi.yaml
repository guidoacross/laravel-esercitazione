openapi: 3.0.3
info:
    title: Laravel
    description: ''
    version: 1.0.0
servers:
    -
        url: 'http://localhost'
paths:
    /api/user:
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                401:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: Unauthenticated.
                                properties:
                                    message: { type: string, example: Unauthenticated. }
            tags:
                - Endpoints
            security: []
    '/api/{fallbackPlaceholder}':
        get:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    message: 'Page Not Found. If error persists, contact ste.samu@across.it'
                                properties:
                                    message: { type: string, example: 'Page Not Found. If error persists, contact ste.samu@across.it' }
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: fallbackPlaceholder
                description: ''
                example: possimus
                required: true
                schema:
                    type: string
    /api/messages:
        get:
            summary: 'Get Messages'
            description: 'List all the messages.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 1, type: email, text: 'Debitis reiciendis culpa voluptatem sit sequi sed beatae. Sunt esse qui quod nam sed error dolor.' }, { id: 2, type: email, text: 'Fugiat dolorem sunt ut ad. Enim quis omnis fugiat. Unde aliquid voluptatem aliquam fuga. Voluptas sit aliquam assumenda. In eveniet ipsum labore iure.' }, { id: 3, type: sms, text: 'Iste suscipit esse occaecati laboriosam veniam cum sed. Harum nulla fuga laudantium et hic eaque. Ea sunt sit et porro ad earum eum. Ex nostrum occaecati iure eum rerum.' }, { id: 4, type: posta, text: 'Assumenda placeat dolores autem porro placeat unde nihil. Quia sed corrupti vitae ea et voluptatem. Dolor inventore neque molestias voluptatem. Nesciunt delectus amet est.' }, { id: 5, type: sms, text: 'Consequatur aut corporis ipsa nemo et est est magnam. Quibusdam quia dolore est quisquam. Libero adipisci magni quo ex reiciendis ut ea.' }, { id: 6, type: sms, text: 'Et quia ipsa recusandae nemo est tenetur enim. Sapiente omnis consectetur excepturi eum unde. In cum animi non. Saepe illum sequi dolorum consequuntur minus sunt accusantium.' }, { id: 7, type: posta, text: 'Beatae quia tempora a earum vel aliquam. Perspiciatis saepe consectetur ut sapiente blanditiis nihil. A illum accusamus amet ut omnis. Maiores molestiae cum nisi tenetur.' }, { id: 8, type: posta, text: 'Molestiae ad nostrum omnis. Eos eum quasi facere numquam voluptas atque repudiandae consequatur. Facilis doloribus optio neque.' }, { id: 9, type: email, text: 'Et placeat est quaerat quibusdam recusandae labore. Ab et quia temporibus voluptates possimus et tempore. Velit sequi ut quisquam vel nihil distinctio numquam.' }, { id: 10, type: sms, text: 'Ipsum eos ut expedita laudantium velit. Distinctio fugit laudantium voluptas doloremque perspiciatis ut nostrum debitis. Molestiae in quia illo vitae. Quidem non molestias ducimus facere.' }, { id: 11, type: sms, text: LoremciaoIpsum }]
                                properties:
                                    data: { type: array, example: [{ id: 1, type: email, text: 'Debitis reiciendis culpa voluptatem sit sequi sed beatae. Sunt esse qui quod nam sed error dolor.' }, { id: 2, type: email, text: 'Fugiat dolorem sunt ut ad. Enim quis omnis fugiat. Unde aliquid voluptatem aliquam fuga. Voluptas sit aliquam assumenda. In eveniet ipsum labore iure.' }, { id: 3, type: sms, text: 'Iste suscipit esse occaecati laboriosam veniam cum sed. Harum nulla fuga laudantium et hic eaque. Ea sunt sit et porro ad earum eum. Ex nostrum occaecati iure eum rerum.' }, { id: 4, type: posta, text: 'Assumenda placeat dolores autem porro placeat unde nihil. Quia sed corrupti vitae ea et voluptatem. Dolor inventore neque molestias voluptatem. Nesciunt delectus amet est.' }, { id: 5, type: sms, text: 'Consequatur aut corporis ipsa nemo et est est magnam. Quibusdam quia dolore est quisquam. Libero adipisci magni quo ex reiciendis ut ea.' }, { id: 6, type: sms, text: 'Et quia ipsa recusandae nemo est tenetur enim. Sapiente omnis consectetur excepturi eum unde. In cum animi non. Saepe illum sequi dolorum consequuntur minus sunt accusantium.' }, { id: 7, type: posta, text: 'Beatae quia tempora a earum vel aliquam. Perspiciatis saepe consectetur ut sapiente blanditiis nihil. A illum accusamus amet ut omnis. Maiores molestiae cum nisi tenetur.' }, { id: 8, type: posta, text: 'Molestiae ad nostrum omnis. Eos eum quasi facere numquam voluptas atque repudiandae consequatur. Facilis doloribus optio neque.' }, { id: 9, type: email, text: 'Et placeat est quaerat quibusdam recusandae labore. Ab et quia temporibus voluptates possimus et tempore. Velit sequi ut quisquam vel nihil distinctio numquam.' }, { id: 10, type: sms, text: 'Ipsum eos ut expedita laudantium velit. Distinctio fugit laudantium voluptas doloremque perspiciatis ut nostrum debitis. Molestiae in quia illo vitae. Quidem non molestias ducimus facere.' }, { id: 11, type: sms, text: LoremciaoIpsum }], items: { type: object } }
            tags:
                - Messages
            security: []
        post:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Messages
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                type:
                                    type: string
                                    description: ''
                                    example: consectetur
                                text:
                                    type: string
                                    description: ''
                                    example: porro
                            required:
                                - type
                                - text
            security: []
    '/api/messages/{message}':
        get:
            summary: 'Get Messages'
            description: 'Get a message by id.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    error: 'Entry for Message not found'
                                properties:
                                    error: { type: string, example: 'Entry for Message not found' }
            tags:
                - Messages
            security: []
        put:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Messages
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                type:
                                    type: string
                                    description: ''
                                    example: magnam
                                text:
                                    type: string
                                    description: ''
                                    example: saepe
                            required:
                                - type
                                - text
            security: []
        delete:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Messages
            security: []
        parameters:
            -
                in: path
                name: message
                description: ''
                example: possimus
                required: true
                schema:
                    type: string
    /api/types:
        get:
            summary: 'Get Types'
            description: 'List all the types.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ name: sms }, { name: email }, { name: posta }]
                                properties:
                                    data: { type: array, example: [{ name: sms }, { name: email }, { name: posta }], items: { type: object } }
            tags:
                - Types
            security: []
        post:
            summary: 'Post Type'
            description: 'Create a type.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Types
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: soluta
                            required:
                                - name
            security: []
    '/api/types/{type}':
        get:
            summary: 'Get Type'
            description: 'Select a type by id.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    error: 'Entry for Type not found'
                                properties:
                                    error: { type: string, example: 'Entry for Type not found' }
            tags:
                - Types
            security: []
        put:
            summary: 'Put Type'
            description: 'Update a type by id.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Types
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: cumque
                            required:
                                - name
            security: []
        delete:
            summary: 'Delete Type'
            description: 'Delete a type by id.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Types
            security: []
        parameters:
            -
                in: path
                name: type
                description: ''
                example: occaecati
                required: true
                schema:
                    type: string
    /api/users:
        get:
            summary: 'Get Users'
            description: 'List all the users.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: 1, name: Gianni, lastname: Eesti, date_of_birth: '1994-10-12', age: 26, types: [{ name: posta }] }, { id: 2, name: Gianni, lastname: Eesti, date_of_birth: '1994-10-12', age: 26, types: [{ name: posta }, { name: sms }] }, { id: 3, name: Gianni, lastname: Eesti, date_of_birth: '1994-10-12', age: 26, types: [{ name: posta }, { name: sms }] }, { id: 5, name: Marcangela, lastname: Gengiotta, date_of_birth: '1984-10-12', age: 36, types: [{ name: posta }] }, { id: 7, name: Geppino, lastname: Gigietto, date_of_birth: '1964-10-12', age: 56, types: [{ name: email }, { name: sms }] }]
                                properties:
                                    data: { type: array, example: [{ id: 1, name: Gianni, lastname: Eesti, date_of_birth: '1994-10-12', age: 26, types: [{ name: posta }] }, { id: 2, name: Gianni, lastname: Eesti, date_of_birth: '1994-10-12', age: 26, types: [{ name: posta }, { name: sms }] }, { id: 3, name: Gianni, lastname: Eesti, date_of_birth: '1994-10-12', age: 26, types: [{ name: posta }, { name: sms }] }, { id: 5, name: Marcangela, lastname: Gengiotta, date_of_birth: '1984-10-12', age: 36, types: [{ name: posta }] }, { id: 7, name: Geppino, lastname: Gigietto, date_of_birth: '1964-10-12', age: 56, types: [{ name: email }, { name: sms }] }], items: { type: object } }
            tags:
                - Users
            security: []
        post:
            summary: 'Post User'
            description: 'Store the user in the database.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Users
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: sit
                                lastname:
                                    type: string
                                    description: ''
                                    example: nostrum
                                date_of_birth:
                                    type: string
                                    description: 'The value must be a valid date in the format Y-m-d.'
                                    example: '2021-05-25'
                                types:
                                    type: array
                                    description: ''
                                    example: [sed, quam]
                                    items: { type: string }
                            required:
                                - name
                                - lastname
                                - date_of_birth
                                - types
            security: []
    '/api/users/{user}':
        get:
            summary: 'Get User'
            description: 'Retriew an user by ID.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    error: 'Entry for User not found'
                                properties:
                                    error: { type: string, example: 'Entry for User not found' }
            tags:
                - Users
            security: []
        put:
            summary: 'Put User'
            description: 'Update a user in the database by ID.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Users
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: ''
                                    example: quae
                                lastname:
                                    type: string
                                    description: ''
                                    example: aliquam
                                date_of_birth:
                                    type: string
                                    description: 'The value must be a valid date in the format Y-m-d.'
                                    example: '2021-05-25'
                                types:
                                    type: array
                                    description: ''
                                    example: [et, quam]
                                    items: { type: string }
                            required:
                                - name
                                - lastname
                                - date_of_birth
                                - types
            security: []
        delete:
            summary: 'Delete User'
            description: 'Delete a user by ID.'
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Users
            security: []
        parameters:
            -
                in: path
                name: user
                description: ''
                example: sunt
                required: true
                schema:
                    type: string
